from parts import *

if PartsExtensionVersion() < "0.14.3":
    PrintError("Need Parts version 0.14.3 or newer!")
else:
    PrintMessage("Using Parts version: {}".format(PartsExtensionVersion()))

# basic configure check
SConscript("SConscript.env")


# we have out of "repo" builds going on here so we want to set the
# some values to allow automake and cmake builders to work better
SetOptionDefault("AUTO_MAKE_DESTDIR", "${ABSPATH('#_destdir/$PART_ALIAS')}")
SetOptionDefault("CMAKE_DESTDIR", "${ABSPATH('#_destdir/$PART_ALIAS')}")

# default protocol used for most of the components
SetOptionDefault("GIT_PROTOCOL", "git")

# assume RPMPAckage is defined in the given part
SetOptionDefault("MY_ROOT_DIR", "/opt/mybuild")
SetOptionDefault("PACKAGE_ROOT", "$MY_ROOT_DIR/${PART_ROOT_NAME}/${PART_SHORT_VERSION}")
# start all RPM with a namespace to avoid clashing with the system
# used MY- for this example change as you like
SetOptionDefault("RPM_PREFIX", "MY-")
# standard name format for all RPMs
# this is a not a Parts value.. but a value we use as a standard for our RPMs we make so it is common
SetOptionDefault("MY_RPM_NAME", '${RPM_PREFIX}${PART_ROOT_NAME}${PART_SHORT_VERSION}')
SetOptionDefault("MY_RPM_DEVEL_NAME", '${MY_RPM_NAME}${RPM_DEVEL_EXT}')



def map_to_part(node):
    ret = []
    pname = MetaTagValue(node, 'part_name', 'package').split(".")[0]

    # this should be tweaked to add the .so files for any .so that is symlink
    # to be in the "dev" package... clean up later.
    category = MetaTagValue(node, 'category', 'package')
    if category in ('INCLUDE', "PKG_CONFIG") or (category == 'LIB' and node.path.endswith(".a")):
        ret.append("{}-dev".format(pname))
    elif MetaTagValue(node, 'category', 'package') == 'PKGDATA' and node.ID.endswith("-dev.spec"):
        ret.append("{}-dev".format(pname))
    else:
        ret.append(pname)
    return ret

# add filter to eaily sort different installed nodes to the correct group
AddPackageNodeFilter(map_to_part)

Part(
    "jemalloc",
    "#open_source/jemalloc.part",
    vcs_type=VcsGit(server="github.com", repository="jemalloc/jemalloc.git", protocol="https", tag="5.2.1"),
)

Part(
    "brotli",
    "#open_source/brotli.part",
    vcs_type=VcsGit(server="github.com", repository="google/brotli", protocol="https", tag="v1.0.7"),
)

Part(
    "openssl",
    "#open_source/openssl.part",
    vcs_type=VcsGit(server="github.com", repository="openssl/openssl", protocol="https", tag="OpenSSL_1_1_1d"),
)

Part(
    "libssh2",
    "#open_source/libssh2.part",
    vcs_type=VcsGit(server="github.com", repository="libssh2/libssh2", protocol="https", tag="libssh2-1.9.0"),
)

Part(
    "jansson",
    "#open_source/jansson.part",
    vcs_type=VcsGit(server="github.com", repository="akheron/jansson", protocol="https", tag="v2.12"),
)

Part(
    "libev",
    "#open_source/libev.part",
    vcs_type=VcsGit(server="git.lighttpd.net", repository="libev", protocol="https", tag="rel-4.27"),
)

Part(
    "libevent",
    "#open_source/libevent.part",
    vcs_type=VcsGit(server="github.com", repository="libevent/libevent", protocol="https", tag="release-2.1.11-stable"),
)

Part(
    "nghttp2",
    "#open_source/nghttp2.part",
    vcs_type=VcsGit(server="github.com", repository="nghttp2/nghttp2", protocol="https", tag="v1.39.2"),
)

Part(
    "libcurl",
    "#open_source/libcurl.part",
    vcs_type=VcsGit(server="github.com", repository="curl/curl.git", protocol="https", tag="curl-7_66_0"),
)


# need to fix the RPM issue that requires this
def_env = DefaultEnvironment()
