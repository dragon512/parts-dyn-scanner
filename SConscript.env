from parts import *
import platform

# some util functionm


def get_distro():
    return platform.linux_distribution()


def isDistro(name, version=None):
    info = platform.linux_distribution()
    if version:
        return info[0] == name and info[1] == version
    return info[0] == name


def isRedHatBased():
    return get_distro()[0].startswith("Red Hat") or get_distro()[0].startswith("CentOS")


ubuntu = [
    "rpm",
    "cmake",
    "xsltproc",
    "libexpat1-dev",
    "docbook-xsl",
    "git",
    "autoconf",
    "automake",
    "libtool",
    "bison",
    "flex",
    "autotools-dev",
    "g++",
    "g++-multilib",
    "libpcre3-dev",
    "libcap-dev",
    "libhwloc-dev",
    "libncurses5-dev",
    "zlib1g-dev",
    "libsigsegv2",
    "libc-ares-dev",
    "libextutils-makemaker-cpanfile-perl",
    "libidn11-dev",
    "libjson-c-dev",
    "libcppunit-dev",
    "libreadline-dev",
    "patchelf"
]

# these are the expected packages we want installed
fedora_rpms = [
    "git",
    "python3",
    "make",
    "gcc",
    "gcc-c++",
    "rpm",
    "rpm-build",
    "cmake",
    "expat-devel",
    "docbook-style-xsl",
    "libxslt-devel",
    "autoconf",
    "automake",
    "libtool",
    "bison",
    "flex",
    "libcap-devel",
    "pcre-devel",
    "hwloc-devel",
    "ncurses-devel",
    "zlib-devel",
    "c-ares-devel",
    "perl-ExtUtils-MakeMaker",
    "perl-Pod-Html",
    "json-c-devel",
    "readline-devel",
    "patchelf",
]

def CheckRpms(context, rpms):
    '''needs clean up to allow it to cache correctly'''
    #import rpm
    context.Message("Check for required rpms are installed ... ")

    to_install = []
    for rpm in rpms:
        VerboseMessage(["rpm-check"], " Checking for {0}".format(rpm))
        result, output = context.TryAction("rpm -q {0}".format(rpm))
        if not result:
            to_install.append(rpm)

    context.Result(not to_install)
    return to_install


def CheckDpkgs(context, dpkgs):
    context.Message("Check that required dpkgs are installed ... ")
    to_install = []
    for pkg in dpkgs:
        VerboseMessage(["pkg-check"], " Checking for {0}".format(pkg))
        result, output = context.TryAction("dpkg -s {0}".format(pkg))
        if not result:
            to_install.append(pkg)

    context.Result(not to_install)
    return to_install

def_env = DefaultEnvironment()
def_settings = DefaultSettings()
conan_script= def_env.File("#activate_run.sh")
cfg = DefaultEnvironment().Configure(custom_tests={"CheckDpkgs": CheckDpkgs, "CheckRpms": CheckRpms})

if isDistro("Ubuntu"):
    to_install = cfg.CheckDpkgs(ubuntu)
    if to_install:
        PrintWarning("Required packages are missing\n please install via running:\n  sudo apt install", " ".join(to_install))
        PrintError("Required packages must be installed!")

if isDistro("Fedora"):
    to_install = cfg.CheckRpms(fedora_rpms)
    if to_install:
        PrintMessage("Required packages are missing\n please install via running:\n  sudo yum install", " ".join(to_install))
        PrintError("Required packages must be installed!")

if conan_script.exists():
    # add in any conan environment we have
    PrintMessage("Found conan active_run.sh script. Loading environment values...")
    def_settings.MergeScriptVariables(conan_script,vars=["PATH"])

cfg.Finish()
